import telebot
from telebot import types

# Initialize the bot with the token
BOT_TOKEN = '7882680466:AAFfYBHVhTgz8cQWJHCztU1AvGUWqXfWdLA'
bot = telebot.TeleBot(BOT_TOKEN)

# Function to handle the callback actions
def handle_question(call):
    questions = {
        'What_is_hackathon': "üíª –•–∞–∫–∞—Ç–æ–Ω ‚Äî —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∫–æ–º–∞–Ω–¥—ã —Ä–µ—à–∞—é—Ç –∑–∞–¥–∞—á–∏ –∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (24-48 —á–∞—Å–æ–≤).",
        'How_to_participate': "üë• –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ö–∞–∫–∞—Ç–æ–Ω–µ, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Å–æ–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π.",
        'How_to_find_team': "üîó –ù–∞–π–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ö–∞–∫–∞—Ç–æ–Ω–∞ –∏–ª–∏ —á–µ—Ä–µ–∑ —á–∞—Ç—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
        'About_app': "üì≤ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ HackOrg –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –æ–±—â–∞—Ç—å—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º."
    }
    bot.send_message(call.message.chat.id, questions.get(call.data, "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å."))


def send_qr_code(call):
    try:
        with open('C:/Users/liste/OneDrive/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/Test1/pframe.png', 'rb') as file:
            bot.send_photo(call.message.chat.id, file)
        bot.send_message(call.message.chat.id, "üì≤ –í–æ—Ç –≤–∞—à QR-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞.")
    except FileNotFoundError:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


def register_user(call):
    bot.send_message(call.message.chat.id, "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ Hackaton!")


def about_hackorg(call):
    bot.send_message(call.message.chat.id,
                     "ü§ñ HackOrg ‚Äî —ç—Ç–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–æ–¥–∏—Ç —Ö–∞–∫–∞—Ç–æ–Ω—ã –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ IT-—Å–æ–æ–±—â–µ—Å—Ç–≤–∞.")


def upcoming_events(call):
    bot.send_message(call.message.chat.id,
                     "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è:\n1Ô∏è‚É£ –•–∞–∫–∞—Ç–æ–Ω '–ó–∏–º–Ω–∏–π –∫–æ–¥–∏–Ω–≥' ‚Äî 12 —è–Ω–≤–∞—Ä—è ‚ùÑÔ∏è\n2Ô∏è‚É£ –õ–µ—Ç–Ω–∏–π —Ö–∞–∫–∞—Ç–æ–Ω 'CyberTech' ‚Äî 15 –∏—é–Ω—è ‚òÄÔ∏è.")


# Start command - Initial menu with options
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()

    # Add buttons to the menu, each button in a separate row
    markup.row(types.InlineKeyboardButton('üßê –û—Ç–≤–µ—Ç—å –Ω–∞ –º–æ–π –≤–æ–ø—Ä–æ—Å', callback_data='question'))
    markup.row(types.InlineKeyboardButton('‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –æ HackOrg', callback_data='about_hackorg'))
    markup.row(types.InlineKeyboardButton('üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –º–µ–Ω—è –≤ Hackaton', callback_data='register_hackaton'))
    markup.row(types.InlineKeyboardButton('üì≤ –î–∞–π –º–Ω–µ QR –¥–ª—è –≤—Ö–æ–¥–∞', callback_data='qr_entry'))
    markup.row(types.InlineKeyboardButton('üéâ –†–∞—Å—Å–∫–∞–∂–∏ –æ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö', callback_data='upcoming_events'))

    bot.send_message(
        message.chat.id,
        f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã –Ø –±–æ—Ç Hack.Org, –º–µ–Ω—è –∑–æ–≤—É—Ç –ë—ç–Ω–∏ ü§ñ. –ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?',
        reply_markup=markup
    )


# Callback handler for button interactions
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    bot.answer_callback_query(call.id)

    # Mapping callback data to specific functions
    actions = {
        'question': lambda call: show_questions(call),
        'register_hackaton': register_user,
        'qr_entry': send_qr_code,
        'about_hackorg': about_hackorg,
        'upcoming_events': upcoming_events
    }

    # Default to handling question-related callbacks
    if call.data in actions:
        actions[call.data](call)
    else:
        handle_question(call)


# Submenu to show questions
def show_questions(call):
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton('ü§î –ß—Ç–æ —Ç–∞–∫–æ–µ —Ö–∞–∫–∞—Ç–æ–Ω?', callback_data='What_is_hackathon'))
    markup.row(types.InlineKeyboardButton('üèÉ –ö–∞–∫ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ö–∞–∫–∞—Ç–æ–Ω–µ?', callback_data='How_to_participate'))
    markup.row(types.InlineKeyboardButton('üîç –ö–∞–∫ –Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É?', callback_data='How_to_find_team'))
    markup.row(types.InlineKeyboardButton('üì± –†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ HackOrg', callback_data='About_app'))

    bot.send_message(call.message.chat.id, "–ù–∞ –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç? ü§ì", reply_markup=markup)


# Help command or specific info
@bot.message_handler(commands=['help', 'bushido_dzo', 'reset'])
def send_help(message):
    if message.text == '/help':
        bot.send_message(message.chat.id,
                         '–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–∑–Ω–∞—Ç—å –æ —Ö–∞–∫–∞—Ç–æ–Ω–∞—Ö, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.')


# Handle other text messages
@bot.message_handler(func=lambda message: True)
def echo_all(message):
    if message.text.lower() == "–ø—Ä–∏–≤–µ—Ç":
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?")
    else:
        bot.send_message(message.chat.id, f"–•–º–º... –¥—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º... ü§î")


# Start bot polling
bot.polling(none_stop=True)

